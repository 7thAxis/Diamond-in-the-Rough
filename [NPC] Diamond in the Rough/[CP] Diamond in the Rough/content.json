/*
Welcome to the Content.json of Diamond in the Rough! Here you'll find the technical set-up stuff for my mod. 
If you have any questions about how somethings works, feel free to reach out!

CREDITS
    FellowClown - Created Eve's house and both Jeremy's portraits and overworld sprites. Also an amazing friend!
    DestyNova - Narrative design help and generally being awesome.
    Chirps/Batty - Beta read and edited my dialogue! Always goofy and fun to hang out with.
    Pooh - Advanced code help, C# to fix Jeremy's path-finding. I've learned so so so so much from her!!
    LemurKat - For being an amazing modmom and giving my babies a home!
    Tenebrous Nova - For a line of Eve dialogue on Spirits Eve in the inn! Too funny not to add.
    KittyCatCasey - For adding amazing features to SpaceCore that let me do fancy things!
    DecidedlyHuman - For creating MEEP, allowing me to do fancy map things!
    TheFrenchDodo - For various music in the mod (Void Snail Waltz and Barbie Girl) + tiny houses on the world map.
    Mad Dog - Did the code for world map edits and generally being an amazing person. Also enabled the Expired Mega Bomb.
    EnderTedi - For also enabling the Expired Mega Bomb along with Mads.
    Concerned Ape - For creating SDV and giving me a creative outlet!
    Flashshifter - For allowing the use of SVE's tilesheets. (Namely the ladder in Eve's house.)
    Zane Little - Eve's theme from FMA. 
        *(https://freemusicarchive.org/music/zane-little/a-bag-of-chips/the-world-is-ours/)
    AlexMcCulloch - Jeremy's theme and Trace's House Theme from OGA. 
        *(https://opengameart.org/content/weird-science)
        *(https://opengameart.org/content/happy)

    Also a special thanks to all my friends offering feedback and creative support:
         JayJayDubs, Tiara, Hecate, Bagi

    Love you all.<3
*/
{
    "Format": "2.0.0",
//---------------------------- CONFIGURATION ------------------------------------------//
    "ConfigSchema": {
    //GAMEPLAY
        "Shadow Stat Changes": {
            "AllowValues": "true, false",
            "Default": true,
            "AllowBlank": false,
            "Description": "Allows for the changing of Shadow stats to no longer harm the player after completing Sen's storyline.",
            "Section": "Gameplay"
        },
        "Pacifist Mode": {
            "AllowValues": "true, false",
            "Default": false,
            "AllowBlank": false,
            "Description": "Shadows will be invincible to player attacks. Players still take damage until a certain point in the story. (Shadow Stat Changes must be set to true for this to take effect.)",
            "Section": "Gameplay"
        },
        "Golem Eradication Substitute": {
            "AllowValues": "true, false",
            "Default": false,
            "AllowBlank": false,
            "Description": "Changes the Void Spirit eradication goal in the Adventurer's Guild to Golems. The player does not have to fight Shadowfolk to reach perfection when enabled. Golem monster list consists of Stone Golems, Wilderness Golems, Iridium Golems, Metal Heads and Dwarvish Sentries.",
            "Section": "Gameplay"
        },
        "Items Excluded From Perfection": {
            "AllowValues": "true, false",
            "Default": false,
            "AllowBlank": false,
            "Description": "If checked, DitR's items will be excluded from perfection. (Some items will not be required regardless due to rarity or relationship gates.)",
            "Section": "Gameplay"
        },
        "NPCs Included in Perfection": {
            "AllowValues": "true, false",
            "Default": true,
            "AllowBlank": false,
            "Description": "If checked, DitR's NPCs will be included in the perfection calculation.",
            "Section": "Gameplay"
        },
        "NPC Schedule Type": {
            "AllowValues": "Dynamic, Simplified",
            "Default": "Dynamic",
            "AllowBlank": false,
            "Description": "Whether DitR NPCs will visit different random locations every day (Dynamic) or follow a set schedule (Simplified). (Simplified makes NPCs easier to locate, but has significantly less content.)",
            "Section": "Gameplay"
        },
    //GRAPHICS
        "Have Shadow Kids": {
            "AllowValues": "true, false",
            "Default": true,
            "AllowBlank": false,
            "Description": "Determines if you have Shadow children when you are married to Sen and changes dialogue accordingly. (Sen must be set as the primary spouse if a polyamory mod is installed for this to take effect.)",
            "Section": "Graphics"
        },
        "Reshade Existing Shadows": {
            "AllowValues": "true, false",
            "Default": false,
            "AllowBlank": false,
            "Description": "Recolors existing Shadowfolk overworld sprites to match DitR's style.",
            "Section": "Graphics"
        },
        "Alpha Pipo Portrait": {
            "AllowValues": "true, false",
            "Default": false,
            "AllowBlank": false,
            "Description": "Uses Pipo's original alpha portrait art. For those that want more derp.",
            "Section": "Graphics"
        },
        "Caldera Void Lava Snails": {
            "AllowValues": "true, false",
            "Default": true,
            "AllowBlank": false,
            "Description": "Spawns visible Void Lava Snails in the Caldera to match in-game lore.",
            "Section": "Graphics"
        },
    //PRONOUNS
        "Player Pronouns 1": {
            "Default": "They",
            "AllowBlank": false,
            "Description": "Sets the player's desired pronouns. You can enter multiple sets for randomized selection each day separated by ','. (Example: They, She)",
            "Section": "Pronouns"
        }, 
        "Player Pronouns 2": {
            "Default": "Them",
            "AllowBlank": false,
            "Description": "Sets the player's desired pronouns. You can enter multiple sets for randomized selection each day separated by ','. (Example: Them, Her)",
            "Section": "Pronouns"
        },
        "Player Pronouns 3": {
            "Default": "Theirs",
            "AllowBlank": false,
            "Description": "Sets the player's desired pronouns. You can enter multiple sets for randomized selection each day separated by ','. (Example: Theirs, Hers)",
            "Section": "Pronouns"
        },
        "Player Pronouns 4": {
            "Default": "Themself",
            "AllowBlank": false,
            "Description": "Sets the player's desired pronouns. You can enter multiple sets for randomized selection each day separated by ','. (Example: Themself, Herself)",
            "Section": "Pronouns"
        },
        "Player Pronoun Identifier": {
            "Default": "are",
            "AllowBlank": false,
            "Description": "Would usually be \"is\" or \"are\", depending on context. (She IS so cool! VS. They ARE so cool!) You can enter multiple sets for randomized selection each day separated by ','. (Example: are, is)",
            "Section": "Pronouns"
        }             
    },
 //---------------------------- DYNAMIC TOKENS ------------------------------------------//
    "DynamicTokens": [    
        //WORLD STATE
            /* 
               TodaysDate - Condenses {{Season}} and {{Day}} into one token
               WeekDay - Checks the current abbreviated week day from WeekDayList contents.
               BasicRandomizer - Basic 50/50 chance used for randomizing various things in the mod.*/

        { "Name": "YearCheck",  "Value": 2 },
        { "Name": "FestivalYearCheck", "Value": "" },
            {
                "Name": "YearCheck", 
                "Value": 1,
                "When": { "Year": 1 }
            },
            {
                "Name": "FestivalYearCheck",
                "Value": "_y2",
                "When": { "Query: {{Year}} % 2 = 1": false } //Odd year false
            },
            {
                "Name": "TodaysDate",
                "Value": "{{Season}} {{Day}}"
            },
            {
                "Name": "WeekDayList",
                "Value": "Sun, Mon, Tue, Wed, Thu, Fri, Sat"
            },
            {
                "Name": "WeekDay",
                "Value": "{{WeekDayList |valueAt={{Query: {{Day}}%7}}}}"
            },
        //SCHEDULE RANDS AND TWEAKERS
        {
            "Name": "PipoAdoptionStatus",
            "Value": "Stray"
        },
        {
            "Name": "PipoAdoptionStatus",
            "Value": "Adopted",
            "When": { "HasSeenEvent: |contains={{ModID}}_Events.EveT.2h.P2": true }
        },
        {
            "Name": "TraceScheduleRandomizer", 
            "Value": "{{Random:{{Range: 1, 10}}|key=TSR}}"
        },
        {
            "Name": "SenScheduleRandomizer", 
            "Value": "{{Random:{{Range: 1, 14}}|key=SSR}}"
        },
        {
            "Name": "EveWaffleScheduleRandomizer", 
            "Value": "{{Random:{{Range: 1, 6}}|key=EWSR}}"
        },
        {
            "Name": "PipoScheduleRandomizer", 
            "Value": "{{Random:{{Range: 1, 7}}|key=PSR}}"
        },
        {
            "Name": "JeremyScheduleRandomizer", 
            "Value": "{{Random:{{Range: 1, 3}}|key=JSR}}"
        },
        {
            "Name": "BasicRandomizer", 
            "Value": "{{Random:{{Range: 1, 2}}}}"
        },
        //SWITCHES
            /* SenPartnershipRoute - Checks the relationship route for Sen the player is currently on. 
               SenKrobusReference - Changes how Sen refers to Krobus based on player met status.*/
        {
            "Name": "SenPartnershipRoute",
            "Value": "Platonic"
        }, 
        {
            "Name": "SenPartnershipRoute", 
            "Value": "Romantic",
            "When": { "HasFlag: |contains=DitR_M_SenS_Romantic": true }
        },
        {
            "Name": "SenKrobusReference",
            "Value": "{{i18n:Core.SenS.KrobusUnknown}}"
        },
        {
            "Name": "SenKrobusReference",
            "Value": "{{i18n:Core.SenS.KrobusKnown}}",
            "When": { "Relationship:Krobus: |contains=Unmet": false }
        },
        {
            "Name": "LivingWithSen", 
            "Value": "false"
        },
        {
            "Name": "LivingWithSen", 
            "Value": "true",
            "When": { "Query: '{{spouse}}' = 'SenS' OR '{{roommate}}' = 'SenS'": true }
        },
        {
            "Name": "PipoShorts", 
            "Value": "{{HasFlag: |contains=DitR_M_PipoShorts}}"
        },

        //EVENT CONDITIONS
        { "Name": "MateoEveIntro", "Value": "" },
        { "Name": "JohnEveIntro", "Value": "" },
        { "Name": "JohnEveIntroAnimation", "Value": "" },
            { 
                "Name": "MateoEveIntro", "Value": "Mateo? 21 62 3",
                "When": { "HasSeenEvent": "SnS.Ch1.Mateo.0" }
            },
            { 
                "Name": "JohnEveIntro", "Value": "FC.John? 24 63 2",
                "When": { "HasSeenEvent": "Fellowclown.AND_JohnIntroduction" }
            },
            { 
                "Name": "JohnEveIntroAnimation", "Value": "showFrame FC.John? 31/",
                "When": { "HasSeenEvent": "Fellowclown.AND_JohnIntroduction" }
            },

        //CONDITIONAL ITEM SPAWN AND SPAWN RATES
        
        { "Name": "FishPondSnailEggSpawnable", "Value": "(O)766" },
        { "Name": "FishPondGoldenSnailEggSpawnable", "Value": "(O)766" },
            {
                "Name": "FishPondSnailEggSpawnable",
                "Value": "(O){{ModID}}_Items.VoidLavaSnailEgg",
                "When": { "HasFlag": "DitR_M_SnailPhase5" }
            },
            {
                "Name": "FishPondGoldenSnailEggSpawnable",
                "Value": "(O){{ModID}}_Items.GoldenVoidLavaSnailEgg",
                "When": { "HasFlag": "DitR_M_SnailPhase5" }
            },

            { 
                "Name": "SnailCrabPotRate", "Value": 0.15,
                "When": { "Season |contains=winter": false }
            },
            { 
                "Name": "SnailCrabPotRate", "Value": 0.20,
                "When": { "Season |contains=winter": true }
            },
            {
                "Name": "SnailCrabPotRate", "Value": 0.08,
                "When": { "HasFlag": "DitR_M_SnailPhase5", "Season |contains=winter": false }
            },
            {
                "Name": "SnailCrabPotRate", "Value": 0.13,
                "When": { "HasFlag": "DitR_M_SnailPhase5", "Season |contains=winter": true }
            },
            {
                "Name": "TodaysSnailRewardItem", 
                "Value": "{{Random: (O)EastScarp_Scarp_Warp_Totem 5, (O)TreasureTotem 1, (O)166 1, (O)69 1, (O)251 1, (O)628 1, (O)629 1, (O)630 1, (O)631 1, (O)632 1, (O)633 1, (O)835 1, (O)268 3, (O)MixedFlowerSeeds 10, (O){{ModID}}_Items.VoidLavaSnailEgg 1|key=TSRI}}"
            },
            {
                "Name": "TodaysSnailRewardIcon", 
                "Value": "{{Random: EastScarp_Scarp_Warp_Totem, TreasureTotem, 166, 69, 251, 628, 629, 630, 631, 632, 633, 835, 268, MixedFlowerSeeds, {{ModID}}_Items.VoidLavaSnailEgg|key=TSRI}}"
            },
            {
                "Name": "TodaysSnailRewardMoney", 
                "Value": "{{Random: 2000, 2000, 2000, 2000, 3000, 3000, 3000, 4000, 4000, 5000}}"
            },
        

        //PASS-IN TOKENS - Used for dialogue sub-randomization and manageable randomization translation 
            /* SenRandTokens - All tokens used for the sub-randomization of Sen's dialogue. (book titles, food, crochet items, etc)
               RelationshipTokens - Storage for tokens that swap terms used based on relationships with or between NPCs
               PlayerPNTokens - Tokens for the player's pronouns, set by the config file. */  
        {
            "Name": "SenRandTokens", //GOD AXELL WHY, GOD WHY GOD WHY WHHHHYYYY
            "Value": "|AP={{i18n:Rand.SenS.Book.AP.{{Random:{{Range: 1, 7}}|key=SenSR1}}}} |BookType={{i18n:Rand.SenS.Book.Type.{{Random:{{Range: 1, 3}}|key=SenSR2}}}} |Subject={{i18n:Rand.SenS.Book.Subj.{{Random:{{Range: 1, 14}}|key=SenSR3}}}} |Subject2={{i18n:Rand.SenS.Book.Subj2.{{Random:{{Range: 1, 7}}|key=SenSR}}}} |Descriptor={{i18n:Rand.SenS.Book.Obj.{{Random:{{Range: 1, 6}}|key=SenSR5}}}} |Descriptor2={{i18n:Rand.SenS.Book.Obj2.{{Random:{{Range: 1, 6}}|key=SenSR6}}}} |Descriptor3={{i18n:Rand.SenS.Book.Obj3.{{Random:{{Range: 1, 6}}|key=SenSR7}}}} |Descriptor4={{i18n:Rand.SenS.Book.Obj4.{{Random:{{Range: 1, 6}}|key=SenSR8}}}} |Descriptor5={{i18n:Rand.SenS.Book.Obj5.{{Random:{{Range: 1, 5}}|key=SenSR9}}}} |BookPeople={{i18n:Rand.SenS.Book.People.{{Random:{{Range: 1, 9}}|key=SenSR10}}}} |Author={{i18n:Rand.SenS.Book.Author.{{Random:{{Range: 1, 8}}|key=SenSR11}}}} |Author2={{i18n:Rand.SenS.Book.Author2.{{Random:{{Range: 1, 5}}|key=SenSR12}}}} |CrocItem={{i18n:Rand.SenS.CrocItem.{{Random:{{Range: 1, 7}}|key=SenSR13}}}} |CrocColor={{i18n:Rand.SenS.CrocColor.{{Random:{{Range: 1, 5}}|key=SenSR14}}}} |Image={{i18n:Rand.SenS.Image.{{Random:{{Range: 1, 9}}|key=SenSR15}}}} |Animal={{i18n:Rand.SenS.Animal.{{Random:{{Range: 1, 5}}|key=SenSR16}}}} |Flavor={{i18n:Rand.SenS.Flavor.{{Random:{{Range: 1, 5}}|key=SenSR17}}}} |FoodStyle={{i18n:Rand.SenS.FoodStyle.{{Random:{{Range: 1, 4}}|key=SenSR18}}}} |Food={{i18n:Rand.SenS.Food.{{Random:{{Range: 1, 7}}|key=SenSR19}}}} |Spikes={{i18n:Rand.SenS.Spikes.{{Random:{{Range: 1, 4}}|key=SenSR20}}}} |Symbolism={{i18n:Rand.SenS.CrocusSymbolism.{{Random:{{Range: 1, 4}}|key=SenSR21}}}} |Object={{i18n:Rand.SenS.FoundObjects.{{Random:{{Range: 1, 7}}|key=SenSR22}}}} |Object2={{i18n:Rand.SenS.FoundObjects2.{{Random:{{Range: 1, 4}}|key=SenSR23}}}} |People={{i18n:Rand.SenS.People.{{Random:{{Range: 1, 12}}|key=SenSR24}}}} |SpringCrop={{i18n:Rand.SenS.SpringCrop.{{Random:{{Range: 1, 5}}|key=SenSR25}}}} |Expression={{i18n:Rand.SenS.Expression.{{Random:{{Range: 1, 5}}|key=SenSR26}}}} |ClosingEH44={{i18n:Rand.SenS.EH.44.{{Random:{{Range: 1, 3}}|key=SenSR27}}}} |ClosingEH46={{i18n:Rand.SenS.EH.46.{{Random:{{Range: 1, 3}}|key=SenSR28}}}} |ClosingEH48={{i18n:Rand.SenS.EH.48.{{Random:{{Range: 1, 3}}|key=SenSR29}}}} |ClosingEH52={{i18n:Rand.SenS.EH.52.{{Random:{{Range: 1, 3}}|key=SenSR30}}}} |ClosingEH53={{i18n:Rand.SenS.EH.53.{{Random:{{Range: 1, 4}}|key=SenSR31}}}} |GameResult1={{i18n:Rand.SenS.EH.54.1.{{Random:{{Range: 1, 2}}|key=SenSR32}}}} |GameResult2={{i18n:Rand.SenS.EH.54.2.{{Random:{{Range: 1, 2}}|key=SenSR33}}}} |QuirkyAction={{i18n:Rand.SenS.EH.56.{{Random:{{Range: 1, 4}}|key=SenSR34}}}} |ClosingLH52={{i18n:Rand.SenS.LH.52.{{Random:{{Range: 1, 3}}|key=SenSR35}}}} |ClosingSR1={{i18n:Relationship.SenS.RN.1.{{Random:{{Range: 1, 3}}|key=SenSR36}}}} |RainJoke={{i18n:Relationship.SenS.RN.3.{{Random:{{Range: 1, 3}}|key=SenSR37}}}} |IndoorJoke={{i18n:Relationship.SenS.ID.3.{{Random:{{Range: 1, 3}}|key=SenSR38}}}} |SDay19={{i18n:Rand.SenS.SDay19.{{Random:{{Range: 1, 3}}|key=SenSR39}}}}"
        },
        {
            "Name": "RelationshipTokens",
            "Value": "|SenRelationshipTerm={{i18n:Core.SenS.RelationshipTerm.{{Relationship:SenS |contains=Married, Dating, Engaged}}}} |SenKrobusReference={{SenKrobusReference}}"
        },
        {
            "Name": "TraceRoomTokens",
            "Value": "|Book1={{i18n:Rand.TraceV.Book.{{Random:{{Range: 1, 21}}|key=TB1}}}} |Book2={{i18n:Rand.TraceV.Book.{{Random:{{Range: 1, 21}}|key=TB2}}}} |Book3={{i18n:Rand.TraceV.Book.{{Random:{{Range: 1, 21}}|key=TB3}}}} |Book4={{i18n:Rand.TraceV.Book.{{Random:{{Range: 1, 21}}|key=TB4}}}} |Book5={{i18n:Rand.TraceV.Book.{{Random:{{Range: 1, 21}}|key=TB5}}}} |TVShow={{i18n:Rand.TraceV.TVShow.{{Random:{{Range: 1, 10}}|key=TTV}}}}"
        },
        {
            "Name": "PlayerPNTokens",
            "Value": "|CPPN1={{Random: {{Player Pronouns 1}} |key=PlayerPronouns}} |CPPN2={{Random: {{Player Pronouns 2}} |key=PlayerPronouns}} |CPPN3={{Random: {{Player Pronouns 3}} |key=PlayerPronouns}} |CPPN4={{Random: {{Player Pronouns 4}} |key=PlayerPronouns}} |CPPNI={{Random: {{Player Pronoun Identifier}} |key=PlayerPronouns}} |LPPN1={{Random: {{Lowercase: {{Player Pronouns 1}}}} |key=PlayerPronouns}} |LPPN2={{Random: {{Lowercase: {{Player Pronouns 2}}}} |key=PlayerPronouns}} |LPPN3={{Random: {{Lowercase: {{Player Pronouns 3}}}} |key=PlayerPronouns}} |LPPN4={{Random: {{Lowercase: {{Player Pronouns 4}}}} |key=PlayerPronouns}} |LPPNI={{Random: {{Lowercase: {{Player Pronoun Identifier}}}} |key=PlayerPronouns}}"
        },

    //Situational Override Dialogue Generator 
        //Generates conditional dialogue that will randomly override daily dialogue. 
        //Hideous DTs but prevents me from running 500 Randomized Query checks that can overlap.
        //Set up to remove dialogue from the pool if conditions aren't correct.
        //Blank values are unfortunately needed or the entire override DT explodes
        //Must be done per NPC as {{TargetWithoutPath}} will not parse correctly in a DT.
        //Done key={{Time}} to force more robust randomization (was experiencing a lot of repeat dialogue)

        //--EVE OVERRIDE DIALOGUE GENERATION--

            { "Name": "EveOverrideDialogue", "Value": "" }, 
            { "Name": "EveOverrideConditions", "Value": "Inactive" },
            { "Name": "ETSD", "Value": "Empty" }, //Empty keeps EveOverrideDialogue from screaming abt being empty on disabled days
            { "Name": "ETHasED", "Value": "" },
            { "Name": "ETHasBOES", "Value": "" }, 

        {
            "Name": "EveOverrideDayNumber",
            "Value": "{{Random: {{Range: 1, 10}}|key=ETDO}}"
        },
        {
            "Name": "EveOverrideDay",
            "Value": "{{Query: {{EveOverrideDayNumber}} = 1 }}"
        },
        {
            "Name": "EveOverrideConditions",
            "Value": "Active",
            "When": { "EveOverrideDay": true , "HasFlag: |contains=DitR_M_EveT_OverrideSeenToday": false }
        },        
        {
            "Name": "ETSD",
            "Value": "{{i18n:Core.EveT.Season.{{season}}.{{Random:{{Range: 1, 5}}|key={{Time}}}}}}",
            "When": { "EveOverrideConditions": "Active" }
        },         
        {
            "Name": "ETHasED",
            "Value": "{{i18n:Core.EveT.EDComment.{{Random:{{Range: 1, 3}}|key={{Time}}}}}}++",
            "When": { "HasMod: |contains=TenebrousNova.EliDylan.CP": true, "EveOverrideConditions": "Active" }
        },      
        {
            "Name": "ETHasBOES", 
            "Value": "{{i18n:Core.EveT.BOESComment.{{Random:{{Range: 1, 3}}|key={{Time}}}}}}++",
            "When": { "HasMod: |contains=KingMadapples.BOES.CP": true, "EveOverrideConditions": "Active" }
        },  
        {
            "Name": "EveOverrideDialogue",
            "Value": "{{Random:{{ETHasED}} {{ETHasBOES}} {{ETSD}}|key={{Query:{{Time}}+10}}|inputSeparator=++}}",
            "When": { "EveOverrideConditions": "Active" }
        },

        //--SEN OVERRIDE DIALOGUE GENERATION--

            { "Name": "SenOverrideDialogue", "Value": "" }, 
            { "Name": "SenOverrideConditions", "Value": "Inactive" },
            { "Name": "SSSD", "Value": "Empty" }, //Empty keeps SenOverrideDialogue from screaming abt being empty on disabled days
            { "Name": "SSRD",  "Value": "" },
            { "Name": "SSKD", "Value": "" },

        {
            "Name": "SenOverrideDayNumber",
            "Value": "{{Random: {{Range: 1, 10}}|key=SSDO}}"
        },
        {
            "Name": "SenOverrideDay",
            "Value": "{{Query: {{SenOverrideDayNumber}} = 1 }}"
        },
        {
            "Name": "SenOverrideConditions",
            "Value": "Active",
            "When": { "SenOverrideDay": true , "HasFlag: |contains=DitR_M_SenS_OverrideSeenToday": false }
        },   
        {
            "Name": "SSSD",
            "Value": "{{i18n:Core.SenS.Season.{{season}}.{{Random:{{Range: 1, 10}}|key={{Time}}}}{{SenRandTokens}}}}",
            "When": { "SenOverrideConditions": "Active" }
        },
        {
            "Name": "SSRD",
            "Value": "{{i18n:Core.SenS.RelationshipOverride.{{Random:{{Range: 1, 10}}|key={{Time}}}}{{RelationshipTokens}}}}++",
            "When": { "HasSeenEvent: |contains={{ModID}}_Events.SenS.10h.P3": true, "Hearts:SenS": "{{Range: 8, 10}}", "SenOverrideConditions": "Active" }
        },    
        {
            "Name": "SSKD",
            "Value": "{{i18n:Core.SenS.KrobusCommentary.{{Random:{{Range: 1, 4}}|key={{Time}}}}}}++",
            "When": { "Relationship:Krobus": "Married, Dating, Engaged, Friendly, Divorced", "SenOverrideConditions": "Active"  }
        },
        {
            "Name": "SenOverrideDialogue",
            "Value": "{{Random:{{SSRD}} {{SSKD}} {{SSSD}}|key={{Query:{{Time}}+10}}|inputSeparator=++}}",
            "When": { "SenOverrideConditions": "Active" }
        },
        //--TRACE OVERRIDE DIALOGUE GENERATION--

            { "Name": "TraceOverrideDialogue", "Value": "" }, 
            { "Name": "TraceOverrideConditions", "Value": "Inactive" },
            { "Name": "TVSD", "Value": "Empty" }, //Empty keeps TraceOverrideDialogue from screaming abt being empty on disabled days

        {
            "Name": "TraceOverrideDayNumber",
            "Value": "{{Random: {{Range: 1, 10}}|key=TTDO}}"
        },
        {
            "Name": "TraceOverrideDay",
            "Value": "{{Query: {{TraceOverrideDayNumber}} = 1 }}"
        },
        {
            "Name": "TraceOverrideConditions",
            "Value": "Active",
            "When": { "TraceOverrideDay": true , "HasFlag: |contains=DitR_M_TraceV_OverrideSeenToday": false }
        },        
        {
            "Name": "TVSD",
            "Value": "{{i18n:Core.TraceV.Season.{{season}}.{{Random:{{Range: 1, 5}}|key={{Time}}}}}}",
            "When": { "TraceOverrideConditions": "Active" }
        },          
        {
            "Name": "TraceOverrideDialogue", //Note to self: TVSD++ is a placeholder
            "Value": "{{Random:{{TVSD}}++{{TVSD}}|key={{Query:{{Time}}+10}}|inputSeparator=++}}",
            "When": { "TraceOverrideConditions": "Active" }
        },
        //--COMMAND SHRINKERS--
        {
            "Name": "SFX.SnailCry",
            "Value": "$action spacechase0.SpaceCore_PlaySound {{ModID}}_SFX.SnailCry"
        }
    ],
//---------------------------- FILE LOADER ------------------------------------------//
    "Changes": [
        {
            "Action": "Include",
            "FromFile": "data/FileLoader.json"
        }
    ]
    
}